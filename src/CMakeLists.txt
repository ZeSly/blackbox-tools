set (COMMON_SRC	parser.c tools.c platform.c stream.c decoders.c units.c blackbox_fielddefs.c)
set (DECODER_SRC ${COMMON_SRC} blackbox_decode.c gpxwriter.c imu.c battery.c stats.c)
set (RENDERER_SRC ${COMMON_SRC} blackbox_render.c datapoints.c embeddedfont.c expo.c imu.c)
set (ENCODER_TESTBED_SRC ${COMMON_SRC} encoder_testbed.c encoder_testbed_io.c)

set (COMMON_HEADER	parser.h tools.h platform.h stream.h decoders.h units.h blackbox_fielddefs.h)
set (DECODER_HEADER ${COMMON_HEADER} gpxwriter.h imu.h battery.h stats.h)
set (RENDERER_HEADER ${COMMON_HEADER} datapoints.h embeddedfont.h expo.h imu.h)
set (ENCODER_TESTBED_HEADER ${COMMON_HEADER} encoder_testbed_io.h)

if (WIN32)
    set (DECODER_SRC ${DECODER_SRC} ../lib/getopt_mb_uni/getopt.c ../lib/getopt_mb_uni/getopt.h)
    set (RENDERER_SRC ${RENDERER_SRC} ../lib/getopt_mb_uni/getopt.c ../lib/getopt_mb_uni/getopt.h)
    set (ENCODER_TESTBED_SRC ${RENDERER_SRC} ../lib/getopt_mb_uni/getopt.c ../lib/getopt_mb_uni/getopt.h)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif()

add_definitions(-DBLACKBOX_VERSION=${PROJECT_VERSION}.RC1)

add_executable (blackbox_decode ${DECODER_HEADER} ${DECODER_SRC})
add_executable (blackbox_render  ${RENDERER_HEADER} ${RENDERER_SRC})
add_executable (encoder_testbed ${ENCODER_TESTBED_HEADER} ${ENCODER_TESTBED_SRC})

if (WIN32)
    target_include_directories(blackbox_decode PRIVATE ../lib/getopt_mb_uni)

    target_include_directories(blackbox_render PRIVATE ${CONAN_INCLUDE_DIRS})
    target_include_directories(blackbox_render PRIVATE ../lib/getopt_mb_uni)
    target_include_directories(encoder_testbed PRIVATE ../lib/getopt_mb_uni)
    target_link_libraries(blackbox_render CONAN_PKG::cairo CONAN_PKG::freetype)
    target_link_libraries(encoder_testbed CONAN_PKG::cairo CONAN_PKG::freetype)
endif()
if (UNIX)
   find_package(PkgConfig REQUIRED)

   pkg_check_modules(CAIRO REQUIRED cairo)
   target_include_directories(blackbox_render PUBLIC ${CAIRO_INCLUDE_DIRS})
   target_compile_options(blackbox_render PUBLIC ${CAIRO_CFLAGS_OTHER})

   pkg_check_modules(FREETYPE2 REQUIRED freetype2)
   target_include_directories(blackbox_render PUBLIC ${FREETYPE2_INCLUDE_DIRS})
   target_compile_options(blackbox_render PUBLIC ${FREETYPE2_CFLAGS_OTHER})

   target_link_libraries(blackbox_decode pthread m)
   target_link_libraries(blackbox_render ${FREETYPE2_LIBRARIES} ${CAIRO_LIBRARIES} pthread m)
   target_link_libraries(encoder_testbed pthread m)
endif ()


install (TARGETS blackbox_decode DESTINATION bin)
install (TARGETS blackbox_render DESTINATION bin)

if (UNIX)
set (CPACK_GENERATOR "DEB" "RPM" "TGZ")
else ()
set (CPACK_GENERATOR "ZIP")
endif ()
set (CPACK_PACKAGE_DESCRIPTION "blackbox-tools")
set (CPACK_PACKAGE_DESCRIPTION_SUMMARY "Blackbox flight data recorder tools for INAV and Betaflight")
set (CPACK_PACKAGE_VENDOR "ZeSly")
set (CPACK_PACKAGE_CONTACT "zesly42@@gmail.com")
set (CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
set (CPACK_PACKAGE_VERSION_MAJOR "${PROJECT_VERSION_MAJOR}")
set (CPACK_PACKAGE_VERSION_MINOR "${PROJECT_VERSION_MINOR}")
set (CPACK_PACKAGE_VERSION_PATCH "${PROJECT_VERSION_PATCH}")
set (CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}.${PROJECT_VERSION}.RC1")
set (CPACK_RPM_PACKAGE_REQUIRES "libc6 >= 2.27, libcairo2 >= 1.14, libfreetype6 >= 2.5.3")
set (CPACK_RPM_PACKAGE_LICENSE "GPLv3")
set (CPACK_DEBIAN_PACKAGE_DEPENDS "libc6 (>= 2.27), libcairo2 (>= 1.14), libfreetype6 (>= 2.5.3)")
set (CPACK_DEBIAN_PACKAGE_LICENSE "GPLv3")

include (CPack)
